
name: Deploy USBackup

on:
  push:
    branches:
      - main
      - gh-pages
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install system dependencies
      run: |
        sudo apt update && sudo apt upgrade -y
        sudo apt install -y python3 python3-pip git nginx jq gunicorn

    - name: Create virtual environment and install dependencies
      run: |
        python -m venv env
        source env/bin/activate
        pip install -r requirements.txt
        pip install gunicorn

    - name: Set environment variables
      run: |
        echo "AUTH_TOKEN=${{ secrets.AUTH_TOKEN }}" >> .env
        echo "BACKUP_DIRECTORY=${{ secrets.BACKUP_DIRECTORY }}" >> .env
        echo "BACKUP_INTERVAL=${{ secrets.BACKUP_INTERVAL }}" >> .env
        echo "GNUPG_HOME=${{ secrets.GNUPG_HOME }}" >> .env
        echo "HDD_DEVICE=${{ secrets.HDD_DEVICE }}" >> .env
        echo "HDD_SERIAL_NUMBER=${{ secrets.HDD_SERIAL_NUMBER }}" >> .env
        echo "LOGGING_LEVEL=${{ secrets.LOGGING_LEVEL }}" >> .env
        echo "NETWORK_DEVICE_PATH=${{ secrets.NETWORK_DEVICE_PATH }}" >> .env
        echo "NETWORK_PASSWORD=${{ secrets.NETWORK_PASSWORD }}" >> .env
        echo "NETWORK_USERNAME=${{ secrets.NETWORK_USERNAME }}" >> .env
        echo "NOTIFICATION_EMAIL=${{ secrets.NOTIFICATION_EMAIL }}" >> .env
        echo "REMOTE_HOST=${{ secrets.REMOTE_HOST }}" >> .env
        echo "REMOTE_PATH=${{ secrets.REMOTE_PATH }}" >> .env
        echo "REMOTE_USER=${{ secrets.REMOTE_USER }}" >> .env
        echo "SFTP_PRIVATE_KEY=${{ secrets.SFTP_PRIVATE_KEY }}" >> .env
        echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
        echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
        echo "SMTP_SERVER=${{ secrets.SMTP_SERVER }}" >> .env
        echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> .env
        echo "SMTP_USE_TLS=${{ secrets.SMTP_USE_TLS }}" >> .env
        echo "SMTP_USE_SSL=${{ secrets.SMTP_USE_SSL }}" >> .env
        echo "SSH_KEY_PATH=${{ secrets.SSH_KEY_PATH }}" >> .env
        echo "USB_DEVICE_PATH=${{ secrets.USB_DEVICE_PATH }}" >> .env
        echo "USB_SERIAL_NUMBER=${{ secrets.USB_SERIAL_NUMBER }}" >> .env
    
    - name: Prepare logs directory
      run: mkdir -p logs

    - name: Configure Gunicorn service
      run: |
        sudo bash -c 'cat > /etc/systemd/system/usbackup.service <<EOL
        [Unit]
        Description=Gunicorn instance to serve USBackup
        After=network.target

        [Service]
        User=runner
        Group=www-data
        WorkingDirectory=/home/runner/work/USBackup/USBackup
        Environment="PATH=/home/runner/work/USBackup/USBackup/env/bin"
        ExecStart=/home/runner/work/USBackup/USBackup/env/bin/gunicorn -w 4 -b 0.0.0.0:5000 server:app

        [Install]
        WantedBy=multi-user.target
        EOL'

    - name: Start and enable Gunicorn service
      run: |
        sudo systemctl daemon-reload
        sudo systemctl start usbackup
        sudo systemctl enable usbackup

    - name: Configure Nginx as reverse proxy
      run: |
        sudo rm /etc/nginx/sites-enabled/default
        sudo bash -c 'cat > /etc/nginx/sites-available/usbackup <<EOL
        server {
            listen 80;
            server_name _;

            location / {
                proxy_pass http://127.0.0.1:5000;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
            }
        }
        EOL'
        sudo ln -s /etc/nginx/sites-available/usbackup /etc/nginx/sites-enabled/

    - name: Restart Nginx
      run: sudo systemctl restart nginx

    - name: Allow Nginx through firewall
      run: |
        sudo ufw allow 'Nginx Full'
        sudo ufw reload

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy_pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
